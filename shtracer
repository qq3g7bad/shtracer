#!/bin/sh

##
# @defgroup Global variables
# @{

CONFIG_PATH=''
SHTRACER_MODE='NORMAL'
OUTPUT_COLORIZE='FALSE'
BEFORE_TAG=''
AFTER_TAG=''
OUTPUT_DIR='./output/'
SHTRACER_SEPARATOR="<shtracer_separator>"
NODATA_STRING="NONE"
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

##
# @}
#

##
# @brief  Load helper functions
# @tag    @IMP1.2@ (FROM: @ARC1.2@)
load_functions() {
	. "${SCRIPT_DIR%/}/scripts/main/shtracer_util.sh"
	. "${SCRIPT_DIR%/}/scripts/main/shtracer_func.sh"
	. "${SCRIPT_DIR%/}/scripts/main/shtracer_uml.sh"
}

##
# @brief  Print usage
# @tag    @IMP1.3@ (FROM: @ARC1.2@)
print_usage() {
	cat <<-USAGE 1>&2
		Usage: shtracer <configfile> [options]

		Options:
		  -c <before_tag> <after_tag>      Change mode: swap or rename trace target tags
		  -v                               Verify mode: detect duplicate or isolated tags
		  -t                               Test mode: execute unit tests
		  -h, --help                       Show this help message

		Examples:
		      1. Normal mode
		         $ ./shtracer ./sample/config.md

		  2. Change mode (swap or rename tags).
		     $ ./shtracer ./sample/config.md -c old_tag new_tag.

		  3. Verify mode (check for duplicate or isolated tags).
		     $ ./shtracer ./sample/config.md -v

		  4. Test mode
		     $ ./shtracer -t

		Note:
		  - The <configfile> argument must always be specified before options.
		  - The -o option is optional and can be used with both change mode and verify mode.

		Version:
		  - 0.0.1

	USAGE
	exit 1
}

##
# @brief  Parse arguments
# @tag    @IMP1.5@ (FROM: @ARC1.2@)
parse_arguments() {
	case "$#${1:-}${2:-}${3:-}${4:-}" in
	1-h | 1-v | 1--help | 1--version) # Print usage
		print_usage
		;;
	1-t) # Test mode
		SHTRACER_MODE='TEST'
		return
		;;
	1-*) # Undefined option
		error_exit 1 'Invalid argument'
		;;
	1*) # Normal mode
		SHTRACER_MODE='NORMAL'
		;;
	2*-C) # Normal mode with color
		SHTRACER_MODE='NORMAL'
		OUTPUT_COLORIZE='TRUE'
		;;
	2*-v) # Verify mode
		SHTRACER_MODE='VERIFY'
		;;
	4*-c*) # Change mode
		SHTRACER_MODE='CHANGE'
		BEFORE_TAG="$3"
		AFTER_TAG="$4"
		;;
	*)
		error_exit 1 'Invalid argument'
		;;
	esac

	# Check if config file exists
	if [ ! -r "$1" ]; then
		error_exit 1 "$1 does not exist"
	fi

	CONFIG_PATH="$1"
	CONFIG_DIR="$(cd "$(dirname "$1")" && pwd)"
	OUTPUT_DIR="${CONFIG_DIR%/}/output/"
	CONFIG_OUTPUT=$(check_configfile "$CONFIG_PATH")
}

##
# @brief  Main routine
# @tag    @IMP1.6@ (FROM: @ARC1.1@)
main_routine() {
	load_functions
	init_environment
	parse_arguments "$@"

	_OUTPUT_STRING="$(
		# Tag change mode
		if [ "$SHTRACER_MODE" = 'CHANGE' ]; then
			swap_tags "$CONFIG_OUTPUT" "$BEFORE_TAG" "$AFTER_TAG"
		# Verify mode
		elif [ "$SHTRACER_MODE" = 'VERIFY' ]; then
			TAG_OUTPUT=$(make_tags "$CONFIG_OUTPUT")
			TAG_FOR_VERIFY=$(make_tag_table "$TAG_OUTPUT" | awk -F "$SHTRACER_SEPARATOR" '{for(i=2;i<=NF;i++){printf("%s'"$SHTRACER_SEPARATOR"'", $i)}}')
			verify_tags "$TAG_FOR_VERIFY"
		# Test mode
		elif [ "$SHTRACER_MODE" = 'TEST' ]; then
			sh -c "cd ${SCRIPT_DIR%/}/scripts/test/; ./shtracer_test.sh"
		# Normal mode
		else
			TAG_OUTPUT="$(make_tags "$CONFIG_OUTPUT")"
			JOINED_TAG_TABLE="$(make_tag_table "$TAG_OUTPUT" | awk -F "$SHTRACER_SEPARATOR" '{print $1}')"
			sort <"$JOINED_TAG_TABLE" -k1,1
			make_target_flowchart "$CONFIG_OUTPUT"
		fi
	)"

	if [ $OUTPUT_COLORIZE = TRUE ]; then
		echo "$_OUTPUT_STRING" | sed 's/NONE/\x1b[31m&\x1b[0m/g'
	else
		echo "$_OUTPUT_STRING"
	fi
}

case "$0" in
*shtracer)
	main_routine "$@"
	;;
*)
	:
	;;
esac
